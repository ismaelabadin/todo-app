{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTodoForm","props","state","task","handleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","addTodo","id","uuid","completed","className","onSubmit","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","updateTodo","toggleTodo","result","CSSTransition","timeout","classNames","onClick","TransitionGroup","class","TodoList","todos","toggleCompletion","todo","filter","update","updateTodos","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7042c8e1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {v4 as uuid} from 'uuid';\nimport './NewTodoForm.css';\n\nclass NewTodoForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            task: \"\"\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n\n    handleSubmit(evt) {\n        evt.preventDefault();\n        this.props.addTodo({...this.state, id: uuid(), completed: false});\n        this.setState({\n            task: \"\"\n        });\n    }\n\n    render() {\n        return (\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n                <label htmlFor=\"task\">\n                    New Task\n                </label>\n                <input \n                    type=\"text\"\n                    id=\"task\"\n                    name=\"task\"\n                    placeholder=\"New Task\"\n                    value={this.state.task}\n                    onChange={this.handleChange}\n                />\n                <button>Add Todo</button>\n            </form>\n        );\n    }\n}\n\nexport default NewTodoForm;","import React, {Component} from 'react';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport './Todo.css';\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            task: this.props.task\n        };\n\n        this.handleRemove = this.handleRemove.bind(this);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleRemove() {\n        this.props.removeTodo(this.props.id);\n    }\n\n    toggleForm() {\n        this.setState({\n            isEditing: !this.state.isEditing\n        });\n    }\n\n    handleUpdate(evt) {\n        evt.preventDefault();\n        this.props.updateTodo(this.props.id, this.state.task);\n        this.setState({\n            isEditing: false\n        });\n    }\n\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n\n    handleToggle(evt) {\n        this.props.toggleTodo(this.props.id);\n    }\n\n    render() {\n        let result;\n        if (this.state.isEditing) {\n            result = (\n                <CSSTransition key=\"editing\" timeout={500} classNames=\"form\">\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n                        <input \n                            type=\"text\"\n                            name=\"task\"\n                            value={this.state.task}\n                            onChange={this.handleChange}\n                        />\n                        <button>Save</button>\n                    </form>\n                </CSSTransition>\n            );\n        } else {\n            result = (\n                <CSSTransition key=\"normal\" timeout={500} classNames=\"task-text\">\n                    <li className=\"Todo-task\" onClick={this.handleToggle}>\n                        {this.props.task}\n                    </li>\n                </CSSTransition>\n            );\n        }\n\n        return (\n            <TransitionGroup className={this.props.completed ? \"Todo completed\" : \"Todo\"}>\n                {result}\n                <div className=\"Todo-buttons\">\n                    <button onClick={this.toggleForm}>\n                        <i class=\"fas fa-pen\" />\n                    </button>\n                    <button onClick={this.handleRemove}>\n                        <i class=\"fas fa-trash\" />\n                    </button>\n                </div>\n            </TransitionGroup>\n        );\n    }\n}\n\nexport default Todo;","import React, {Component} from 'react';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport NewTodoForm from './NewTodoForm';\nimport Todo from './Todo';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todos: []\n        };\n\n        this.addTodo = this.addTodo.bind(this);\n        this.removeTodo = this.removeTodo.bind(this);\n        this.updateTodo = this.updateTodo.bind(this);\n        this.toggleCompletion = this.toggleCompletion.bind(this);\n    }\n\n    addTodo(todo) {\n        this.setState({\n            todos: [...this.state.todos, todo]\n        });\n    }\n\n    removeTodo(id) {\n        this.setState({\n            todos: this.state.todos.filter(todo => todo.id !== id)\n        });\n    }\n\n    updateTodo(id, update) {\n        const updateTodos = this.state.todos.map(todo => {\n            if (todo.id === id) {\n                return {...todo, task: update};\n            }\n            return todo;\n        });\n        this.setState({\n            todos: updateTodos\n        });\n    }\n\n    toggleCompletion(id) {\n        const updateTodos = this.state.todos.map(todo => {\n            if (todo.id === id) {\n                return {...todo, completed: !todo.completed};\n            }\n            return todo;\n        });\n        this.setState({\n            todos: updateTodos\n        });\n    }\n\n    render() {\n        const todos = this.state.todos.map(todo => {\n            return (\n                <CSSTransition key={todo.id} timeout={500} classNames=\"todo\">\n                    <Todo \n                        id={todo.id}\n                        key={todo.id}\n                        task={todo.task}\n                        completed={todo.completed}\n                        removeTodo={this.removeTodo}\n                        updateTodo={this.updateTodo}\n                        toggleTodo={this.toggleCompletion}\n                    />\n                </CSSTransition>\n            );\n        });\n\n        return (\n            <div className=\"TodoList\">\n                <h1>\n                    Get To Work! <span>An Animated Todo List Made With React Hooks</span>\n                </h1>\n                <NewTodoForm addTodo={this.addTodo} />\n\n                <ul>\n                    <TransitionGroup className=\"todo-list\">\n                        {todos}\n                    </TransitionGroup>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default TodoList;","import React, {Component} from 'react';\nimport TodoList from './TodoList';\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <TodoList />\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}